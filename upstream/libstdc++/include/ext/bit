// bit data structures extension -*- C++ -*-

// Copyright (C) 2019-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file ext/bit
 *  This file is a GNU extension to the Standard C++ Library.
 *  It provides a suite of bit iterators, bit references,
 *  bit values, algorithmic improvements
 */

#pragma once

#ifndef _EXT_BIT_DS_H
#define _EXT_BIT_DS_H 1

#if (defined(__cplusplus) && __cplusplus >= 201703L)

#include <ext/bit_ds/bit_operations.h>
#include <ext/bit_ds/bit_iterator.h>
#include <ext/bit_ds/bit_algorithm.h>
#include <ext/bit_ds/bit_algorithm_std.h>
#include <ext/bit_ds/bit_view.h>
#include <ext/bit_ds/bit_sequence.h>

#include <cstddef>
#include <vector>

#define _GLIBCXX_BIT_DS 201909L

namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
{
	_GLIBCXX_BEGIN_NAMESPACE_VERSION

	// core structures
	using bit_value = ::__gnu_cxx::__bit_value;

	inline constexpr bit_value bit0 = ::__gnu_cxx::__bit0;
	inline constexpr bit_value bit1 = ::__gnu_cxx::__bit1;

	template<typename _Type>
	using bit_mask_type = ::__gnu_cxx::__bit_mask_type<_Type>;

	template<typename _Type>
	using bit_mask_type_t = typename bit_mask_type<_Type>::type;

	template<typename _Ref, typename _Mask = bit_mask_type_t<_Ref>>
	using bit_reference = ::__gnu_cxx::__bit_reference<_Ref, _Mask>;

	template<typename _Iterator>
	using bit_pointer = ::__gnu_cxx::__bit_pointer<_Iterator>;

	template<typename _It>
	using bit_iterator = ::__gnu_cxx::__bit_iterator<_It>;

	template<typename _Range>
	using word_bit_bounds = ::__gnu_cxx::__word_bit_bounds<_Range>;

	template<::std::size_t _First, ::std::size_t _Last>
	using bit_bounds = ::__gnu_cxx::__bit_bounds<_First, _Last>;

	using dynamic_bit_bounds = ::__gnu_cxx::__dynamic_bit_bounds;

	template<typename _Range>
	using dynamic_bit_bounds_for = ::__gnu_cxx::__dynamic_bit_bounds_for<_Range>;

	template<typename _Range, typename _Bounds = word_bit_bounds<_Range>>
	using bit_view = ::__gnu_cxx::__bit_view<_Range, _Bounds>;

	template<typename _Container>
	using bit_sequence = ::__gnu_cxx::__bit_sequence<_Container>;

	template<typename _Type, typename _Allocator = ::std::allocator<_Type>>
	using dynamic_bitset = ::__gnu_cxx::__bit_sequence<::std::vector<_Type, _Allocator>>;

	// bit intrinsic functions, extended functionality
	namespace detail
	{
		template<typename _Type>
		using any_to_underlying_t = __gnu_cxx::__any_to_underlying_t<_Type>;

		template<typename _Integralish>
		auto
		to_underlying_if_enum_or_char_t(_Integralish __val)
		{
			return __gnu_cxx::__to_underlying_if_enum_or_char_t(__val);
		}
	} // namespace detail

	template<typename Integralish>
	constexpr int countl_zero(Integralish value)
	{
		return __gnu_cxx::__countl_zero(value);
	}

	template<typename Integralish>
	constexpr int countl_one(Integralish value)
	{
		return __gnu_cxx::__countl_one(value);
	}

	template<typename Integralish>
	constexpr int countr_zero(Integralish value)
	{
		return __gnu_cxx::__countr_zero(value);
	}

	template<typename Integralish>
	constexpr int countr_one(Integralish value)
	{
		return __gnu_cxx::__countr_one(value);
	}

	template<typename Integralish>
	constexpr int firstl_zero(Integralish value)
	{
		return __gnu_cxx::__firstl_zero(value);
	}

	template<typename Integralish>
	constexpr int firstl_one(Integralish value)
	{
		return __gnu_cxx::__firstl_one(value);
	}

	template<typename Integralish>
	constexpr int firstr_zero(Integralish value)
	{
		return __gnu_cxx::__firstr_zero(value);
	}

	template<typename Integralish>
	constexpr int firstr_one(Integralish value)
	{
		return __gnu_cxx::__firstr_one(value);
	}

	template<typename Integralish>
	constexpr int popcount(Integralish value)
	{
		return __gnu_cxx::__popcount(value);
	}

	_GLIBCXX_END_NAMESPACE_VERSION
} // namespace __gnu_cxx_GLIBCXX_VISIBILITY(default)

#endif // __cplusplus is on 20/2a or better

#endif
