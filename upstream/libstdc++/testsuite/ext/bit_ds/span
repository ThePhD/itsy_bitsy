// span polyfill -*- C++ -*-

// Copyright (C) 2019-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file testsuite/ext/bit_ds/span
 *  This file is a polyfill file for a test.
 *  It provides the world's laziest incomplete
 *  std::span implementation.
 */

#pragma once

#ifndef _EXT_BIT_DS_TESTS_SPAN_POLYFILL_H
#define _EXT_BIT_DS_TESTS_SPAN_POLYFILL_H 1

#if (defined(__cplusplus) && __cplusplus >= 201703L)

#include <cstdint>
#include <iterator>

namespace std
{
	template<typename _Type, ::std::size_t _Extent = static_cast<::std::size_t>(-1)>
	class span
	{
		_Type* _M_it;
		_Type* _M_sen;

	public:
		constexpr span() : span(nullptr, nullptr)
		{
		}

		template<typename _Range>
		constexpr span(_Range& __range)
		: _M_it(::std::data(__range)), _M_sen(::std::data(__range) + ::std::size(__range))
		{
		}

		constexpr span(_Type* __it, _Type* __sen) : _M_it(std::move(__it)), _M_sen(::std::move(__sen))
		{
		}

		constexpr _Type*
		begin() const
		{
			return this->_M_it;
		}

		constexpr _Type*
		end() const
		{
			return this->_M_sen;
		}

		auto
		data()
		{
			return this->_M_it;
		}

		auto
		data() const
		{
			return this->_M_it;
		}

		constexpr auto
		size() const
		{
			return this->_M_sen - this->_M_it;
		}
	};
} // namespace std

#endif

#endif
