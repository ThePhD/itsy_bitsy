// ranges polyfill -*- C++ -*-

// Copyright (C) 2019-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file testsuite/ext/bit_ds/ranges
 *  This file is a polyfill file for testing.
 *  It provides the world's laziest incomplete
 *  std::ranges::subrange implementation.
 */

#pragma once

#ifndef _EXT_BIT_DS_TESTS_RANGES_POLYFILL_H
#define _EXT_BIT_DS_TESTS_RANGES_POLYFILL_H 1

#if (defined(__cplusplus) && __cplusplus >= 201703L)

namespace std
{
	namespace ranges
	{
		enum class subrange_kind : bool
		{
			unsized,
			sized
		};
		template<typename _Iterator, typename _Sentinel, subrange_kind _Kind>
		class subrange
		{
			_Iterator _M_it;
			_Sentinel _M_sen;

		public:
			using value_type      = typename ::std::iterator_traits<_Iterator>::value_type;
			using reference       = typename ::std::iterator_traits<_Iterator>::reference;
			using iterator        = _Iterator;
			using const_iterator  = _Iterator;
			using difference_type = ::std::ptrdiff_t;
			using size_type       = ::std::make_unsigned_t<difference_type>;

			constexpr subrange() noexcept = default;

			constexpr subrange(_Iterator __it, _Sentinel __sen) noexcept
			: _M_it(std::move(__it)), _M_sen(::std::move(__sen))
			{
			}

			constexpr _Iterator
			begin() const
			{
				return _M_it;
			}

			constexpr _Sentinel
			end() const
			{
				return _M_sen;
			}

			constexpr _Iterator
			cbegin() const
			{
				return _M_it;
			}

			constexpr _Sentinel
			cend() const
			{
				return _M_sen;
			}

			auto constexpr size() const
			{
				return ::std::distance(this->_M_it, this->_M_sen);
			}
		};
	} // namespace ranges
} // namespace std

#endif

#endif
